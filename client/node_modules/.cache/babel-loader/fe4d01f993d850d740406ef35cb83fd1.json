{"ast":null,"code":"import { GET_PROFILE, GET_PROFILE_FAIL, GET_PROFILE_SUCCESS, USER_LOGIN, USER_LOGIN_FAIL, USER_LOGIN_SUCCESS, USER_REGISTER, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS } from \"../constants/actionType\";\nimport axios from 'axios'; //high order function ,dispatch: to dispatch action of the back end success/fail/register \n\nexport const signUp = newUser => async dispatch => {\n  dispatch({\n    type: USER_REGISTER\n  });\n\n  try {\n    const addUser = await axios.post('/user/register', newUser);\n    console.log(addUser);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: addUser.data\n    });\n  } catch (error) {\n    console.log(error.response.data);\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response.data\n    });\n  }\n};\nexport const userLogin = userCred => async dispatch => {\n  dispatch({\n    type: USER_LOGIN\n  });\n\n  try {\n    const userLogin = await axios.post('/user/login', userCred);\n    console.log(userCred); //stocker token in local storage to verifier if the user is logged or not\n\n    localStorage.setItem('token', userLogin.data.token);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: userLogin.data.token\n    });\n  } catch (error) {\n    console.log(error.response.data);\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response.data\n    });\n  }\n};\nexport const getProfile = () => async dispatch => {\n  dispatch({\n    type: GET_PROFILE\n  });\n\n  try {\n    const token = localStorage.getItem('token');\n    const config = {\n      headers: {\n        Authorization: token\n      }\n    };\n    const userProfile = await axios.get('user/profile', config);\n    dispatch({\n      type: GET_PROFILE_SUCCESS,\n      payload: userProfile.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_PROFILE_FAIL,\n      payload: error.response.data\n    });\n  }\n};\n\nconst getEvent = () => {};","map":{"version":3,"sources":["D:/GoMyCode/MERNProject/client/src/JS/action/index.js"],"names":["GET_PROFILE","GET_PROFILE_FAIL","GET_PROFILE_SUCCESS","USER_LOGIN","USER_LOGIN_FAIL","USER_LOGIN_SUCCESS","USER_REGISTER","USER_REGISTER_FAIL","USER_REGISTER_SUCCESS","axios","signUp","newUser","dispatch","type","addUser","post","console","log","payload","data","error","response","userLogin","userCred","localStorage","setItem","token","getProfile","getItem","config","headers","Authorization","userProfile","get","getEvent"],"mappings":"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","sourcesContent":["import { GET_PROFILE, GET_PROFILE_FAIL, GET_PROFILE_SUCCESS, USER_LOGIN, USER_LOGIN_FAIL, USER_LOGIN_SUCCESS, USER_REGISTER, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS } from \"../constants/actionType\"\r\nimport axios from 'axios';\r\n\r\n//high order function ,dispatch: to dispatch action of the back end success/fail/register \r\nexport const signUp = (newUser) => async (dispatch) => {\r\n\r\n      dispatch({ type: USER_REGISTER })\r\n      \r\n      try {\r\n            const addUser =  await axios.post('/user/register', newUser)\r\n            console.log(addUser);\r\n            dispatch({ type: USER_REGISTER_SUCCESS, payload: addUser.data });\r\n            \r\n\r\n\r\n      } catch (error) {\r\n            console.log(error.response.data);\r\n            dispatch({type:USER_REGISTER_FAIL , payload:error.response.data})\r\n            \r\n      }\r\n      \r\n\r\n      \r\n}\r\n\r\n\r\n\r\nexport const userLogin = (userCred) => async (dispatch) => {\r\n\r\n      dispatch({ type: USER_LOGIN })\r\n      \r\n      try {\r\n            const userLogin = await axios.post('/user/login', userCred);\r\n            console.log(userCred);\r\n            //stocker token in local storage to verifier if the user is logged or not\r\n            localStorage.setItem('token', userLogin.data.token);\r\n            dispatch({ type: USER_LOGIN_SUCCESS, payload: userLogin.data.token });\r\n\r\n\r\n      } catch (error) {\r\n            console.log(error.response.data);\r\n            dispatch({ type: USER_LOGIN_FAIL, payload: error.response.data })\r\n            \r\n      }\r\n};\r\n\r\n\r\nexport const getProfile = () => async (dispatch) => {\r\n      dispatch({ type: GET_PROFILE })\r\n      \r\n\r\n\r\n      try {\r\n            const token = localStorage.getItem('token')\r\n\r\n            const config = {\r\n                  headers: {\r\n                        Authorization: token\r\n                  }\r\n            }\r\n            const userProfile = await axios.get('user/profile', config)\r\n      \r\n            dispatch({ type: GET_PROFILE_SUCCESS, payload: userProfile.data })\r\n      } catch (error) {\r\n            dispatch({ type: GET_PROFILE_FAIL, payload: error.response.data })\r\n            \r\n      }\r\n};\r\n\r\n\r\nconst getEvent = () => {\r\n      \r\n}"]},"metadata":{},"sourceType":"module"}